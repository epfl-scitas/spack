##############################################################################
# Copyright (c) 2013-2016, Lawrence Livermore National Security, LLC.
# Produced at the Lawrence Livermore National Laboratory.
#
# This file is part of Spack.
# Created by Todd Gamblin, tgamblin@llnl.gov, All rights reserved.
# LLNL-CODE-647188
#
# For details, see https://github.com/llnl/spack
# Please also see the LICENSE file for our notice and the LGPL.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License (as
# published by the Free Software Foundation) version 2.1, February 1999.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and
# conditions of the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
##############################################################################

from spack import *


class Yambo(AutotoolsPackage):
    """ Yambo is a FORTRAN/C code for Many-Body calculations in solid \\
        state and molecular physics. Yambo relies on the Kohn-Sham \\
        wavefunctions generated by two DFT public codes: abinit, and \\
        PWscf. The code was originally developed in the Condensed Matter \\
        Theoretical Group of the Physics Department at the University of \\
        Rome "Tor Vergata" by Andrea Marini. Previous to its release under \\
        the GPL license, yambo was known as SELF. """

    homepage = "http://www.yambo-code.org/index.php"
    url      = "https://github.com/yambo-code/yambo/archive/4.1.3.tar.gz"

    version('4.1.3', 'fe488093f23f0c6c63605826791b1ea4')
    variant('mpi', default=True, description='Builds with mpi support')
    variant('openmp', default=False, description='Builds with OpenMP support')

    depends_on('mpi')
    depends_on('lapack')
    depends_on('scalapack')
    depends_on('blas')
    depends_on('libxc')
    depends_on('netcdf')
    depends_on('netcdf-fortran')
    depends_on('hdf5')
    depends_on('fftw')

    def configure_args(self):
        spec = self.spec
        if '%intel' in spec:
            scalapack_libs = str(spec['scalapack'].libs) + ' ' +\
                str(spec['lapack'].libs)
        elif '%gcc' in spec:
            scalapack_libs = str(spec['scalapack'].libs)
        args = ["--with-netcdf-includedir=%s" %
                spec['netcdf'].prefix.include,
                "--with-netcdf-libs=-L%s -lnetcdf" %
                spec['netcdf'].prefix.lib,
                "--with-netcdff-includedir=%s" %
                spec['netcdf-fortran'].prefix.include,
                "--with-netcdff-libs=-L%s -lnetcdff" %
                spec['netcdf-fortran'].prefix.lib,
                "--with-hdf5-includedir=%s" % spec['hdf5'].prefix.include,
                "--with-hdf5-libs=-L%s -lhdf5_fortran -lhdf5_hl -lhdf5" %
                spec['hdf5'].prefix.lib,
                "--with-blas-libs=%s" % spec['blas'].libs,
                "--with-lapack-libs=%s" % spec['lapack'].libs,
                "--with-scalapack-libs=%s" % scalapack_libs,
                "--with-blacs-libs=%s" % scalapack_libs,
                "--with-fft-libdir=%s" % spec['fftw'].prefix.lib,
                "--with-fft-includedir=%s" % spec['fftw'].prefix.lib]

        if '+openmp' in spec:
            args.append("--enable-open-mp")

        string1 = 'cat config/report'
        string2 = 'cat' + str(self.build_directory) + '/config/report'
        filter_file(string1, string2, 'configure')
        return args

    def install(self, spec, prefix):
        make('all', parallel=False)
